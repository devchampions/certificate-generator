
import org.apache.batik.transcoder.image.JPEGTranscoder
import org.apache.batik.transcoder.TranscoderInput
import org.apache.batik.transcoder.TranscoderOutput

import groovy.util.XmlSlurper
import groovy.xml.XmlUtil

import java.awt.image.BufferedImage
import java.awt.Graphics2D
import java.awt.Color

import static javax.imageio.ImageIO.*


buildscript {
  repositories { mavenCentral() }
  dependencies {
    classpath('batik:batik-transcoder:1.6-1') {
      exclude module: 'fop'
    }
    classpath 'xerces:xercesImpl:2.11.0'
  }
}

task generateCertificates << {
  buildDir.mkdirs()
  File svgTemplate = file("templates/${certificateTemplate}")
  int fileIndex = 1
  forEachPerson { name, certId ->
    logger.quiet "> Generating badge for ${name}"
    File svgCertificateFile = file("${buildDir}/${certId}.svg")    
    svgCertificateFile.text = modifySVG(svgTemplate.text, name, certId)
    renderCertificateImage(svgCertificateFile, file("${buildDir}/rendered/${certId}"), certId)
    svgCertificateFile.delete()
  }
}

generateCertificates.logging.captureStandardOutput LogLevel.INFO
generateCertificates.logging.captureStandardError LogLevel.INFO
generateCertificates.outputs.dir file("${buildDir}/rendered")

task copyCertificateImages(type: Copy, dependsOn: generateCertificates) {
  forEachPerson { name, certId ->
    from ("${buildDir}/rendered/${certId}") { include '*.jpg' }
  }
  into "${buildDir}/images"
}

task zipCertificateImages(type: Zip, dependsOn: copyCertificateImages) {
  from "${buildDir}/images"
  archiveName 'certs.zip'
  destinationDir buildDir
}

task build(dependsOn: [ generateCertificates, copyCertificateImages, zipCertificateImages])

task clean(type: Delete) {
  delete buildDir
}


def modifySVG(String svgText, String name, String certId) {
  def svg = new XmlSlurper().parseText(svgText)
  def certNameElement = svg.depthFirst().find { it.@id == 'cert-name' }
  certNameElement.replaceBody(name)
  def certUrlElement = svg.depthFirst().find { it.@id == 'cert-url' }
  def certUrl = "http://certs.devchampions.com/${certId}"
  project.logger.quiet certUrl
  certUrlElement.replaceBody(certUrl)
  XmlUtil.serialize(svg)
}


def renderCertificateImage(File svgFile, File baseDir, String baseName) {
  baseDir.mkdirs()
  JPEGTranscoder t = new JPEGTranscoder()
  t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY, new Float(1))
  String svgURI = svgFile.toURL().toString()
  t.transcode(new TranscoderInput(svgURI), new TranscoderOutput(new FileOutputStream("${baseDir}/${baseName}.jpg")))
  new File(baseDir, 'index.html').text = """<html><body style="margin: 0px;"><img height="100%" src="${baseName}.jpg"/></body></html>"""
}


def forEachPerson(Closure cl) {
  def lines = file(project.hasProperty('dataFile') ? project.dataFile : 'data.csv').readLines("UTF-8").drop(1).collect { it.trim() }.findAll { it.contains(';') }
  lines.each { String line ->
    def fields = line.split(';')
    cl(fields[0], fields[1])
  }
}




